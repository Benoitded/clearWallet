(()=>{"use strict";const e=[{id:"mainnet",name:"Ethereum Mainnet",chainId:1,blockExplorer:"https://etherscan.io",rpc:[{name:"Llamarpc",url:"https://eth.llamarpc.com"},{name:"PublicNode",url:"https://ethereum-rpc.publicnode.com"},{name:"DRPC",url:"https://eth.drpc.org"},{name:"Flashbots",url:"https://rpc.flashbots.net/fast"}],isTestnet:!1,image:"https://corzzzxuybbykevxkokz.supabase.co/storage/v1/object/public/tokens/ETH.png"},{id:"base",name:"Base",chainId:8453,blockExplorer:"https://basescan.org",rpc:[{name:"Llamarpc",url:"https://base.llamarpc.com"},{name:"PublicNode",url:"wss://base-rpc.publicnode.com"},{name:"Nodies",url:"https://base-pokt.nodies.app"}],isTestnet:!1,image:"https://corzzzxuybbykevxkokz.supabase.co/storage/v1/object/public/tokens/ETH.png"},{id:"holesky",name:"Holesky Testnet",chainId:17e3,blockExplorer:"https://holesky.etherscan.io",rpc:[{name:"PublicNode",url:"https://ethereum-holesky-rpc.publicnode.com"},{name:"Omniatech",url:"https://endpoints.omniatech.io/v1/eth/holesky/public"},{name:"DRPC",url:"https://holesky.drpc.org"}],isTestnet:!0,image:"https://corzzzxuybbykevxkokz.supabase.co/storage/v1/object/public/tokens/ETH.png"},{id:"sepolia",name:"Sepolia Testnet",chainId:11155111,blockExplorer:"https://sepolia.etherscan.io",rpc:[{name:"DRPC",url:"https://sepolia.drpc.org"},{name:"PublicNode",url:"https://ethereum-sepolia-rpc.publicnode.com"}],isTestnet:!0,image:"https://corzzzxuybbykevxkokz.supabase.co/storage/v1/object/public/tokens/ETH.png"}],a=(a,t=[])=>[...e,...t].find(e=>e.chainId===a),t=e=>`0x${e.toString(16)}`,r=e=>e.startsWith("0x")?parseInt(e,16):parseInt(e,10);async function o(o,n){await async function(t,o){try{console.log("ClearWallet Background: handleSwitchChain called",t);const n=r(t.chainId);if(isNaN(n))return console.log("ClearWallet Background: Invalid chain ID",t.chainId),void o({error:{code:4001,message:"Invalid chain ID"}});console.log("ClearWallet Background: Parsed chainId",n);const c=await chrome.storage.local.get(["selectedNetwork","customNetworks"]),s=c.selectedNetwork,l=c.customNetworks||[],i=a(n,l);if(!i)return console.log("ClearWallet Background: Chain not found",n,"Available:",[...e,...l].map(e=>e.chainId)),void o({error:{code:4902,message:`Unrecognized chain ID "${t.chainId}". Try adding the chain using wallet_addEthereumChain first.`}});if(s&&s.chainId===n)return console.log("ClearWallet Background: Already on target network"),void o(null);await chrome.storage.local.set({selectedNetwork:i}),console.log(`ClearWallet Background: Successfully switched to ${i.name} (${t.chainId})`),o(null)}catch(e){console.error("ClearWallet Background: Error in handleSwitchChain:",e),o({error:{code:4001,message:"Failed to switch chain"}})}}(o,async e=>{if(null===e)try{const e=r(o.chainId);await async function(e){try{console.log("ClearWallet Background: Notifying all dApps of chain change",e);const a=(await chrome.storage.local.get(["connectedSites"])).connectedSites||[],r=await chrome.tabs.query({});for(const o of r)if(o.id&&o.url)try{const r=new URL(o.url).origin;a.some(e=>e.url===r)&&(console.log(`ClearWallet Background: Notifying tab ${o.id} (${r}) of chain change`),await chrome.tabs.sendMessage(o.id,{type:"CHAIN_CHANGED",data:{chainId:t(e),chainIdNumber:e}}))}catch(e){console.log(`ClearWallet Background: Could not notify tab ${o.id}:`,e instanceof Error?e.message:"Unknown error")}}catch(e){console.error("ClearWallet Background: Error notifying dApps:",e)}}(e)}catch(e){console.error("ClearWallet Background: Error notifying DApps:",e)}n(e)})}async function n(t,o){await async function(t,o){try{if(!t.chainId||!t.chainName||!t.rpcUrls)return void o({error:{code:4001,message:"Missing required chain parameters (chainId, chainName, rpcUrls)"}});const c=r(t.chainId);if(isNaN(c))return void o({error:{code:4001,message:"Invalid chain ID"}});if(n=c,e.some(e=>e.chainId===n))return console.log("ClearWallet Background: Chain already exists as built-in network"),void o(null);const s=(await chrome.storage.local.get(["customNetworks"])).customNetworks||[];if(a(c,s))return console.log("ClearWallet Background: Custom chain already exists"),void o(null);const l={id:`custom-${c}`,name:t.chainName,chainId:c,blockExplorer:t.blockExplorerUrls?.[0]||"",rpc:[{name:"Default",url:t.rpcUrls[0]}],isTestnet:1!==c&&8453!==c,isCustom:!0},i=[...s,l];await chrome.storage.local.set({customNetworks:i}),console.log(`ClearWallet Background: Successfully added ${t.chainName} (${t.chainId})`),o(null)}catch(e){console.error("ClearWallet Background: Error in handleAddChain:",e),o({error:{code:4001,message:"Failed to add chain"}})}var n}(t,o)}chrome.runtime.onInstalled.addListener(()=>{console.log("clearWallet extension installed")});const c=new Set;async function s(){const e=await chrome.storage.local.get(["wallets","selectedWallet"]),a=e.wallets||[],t=e.selectedWallet;return 0===a.length?[]:t&&a.find(e=>e.address===t.address)?[t.address]:[a[0].address]}!async function(){const e=await chrome.storage.local.get(["connectedSites"]);e.connectedSites&&e.connectedSites.forEach(e=>{c.add(e.url)})}(),chrome.runtime.onMessage.addListener((e,a,r)=>{switch(console.log("ClearWallet Background: Received message",e.type,e),e.type){case"GET_WALLET_STATE":return async function(e){try{const a=await s();e({success:!0,data:{isConnected:a.length>0,accounts:a,chainId:"0x1"}})}catch(a){e({success:!1,error:"Failed to get wallet state"})}}(r),!0;case"SIGN_TRANSACTION":return async function(e,a){try{a({success:!0,data:{signature:"0x"+"0".repeat(130)}})}catch(e){a({success:!1,error:"Failed to sign transaction"})}}(e.data,r),!0;case"GET_ACCOUNTS":return async function(e){try{e({success:!0,data:await s()})}catch(a){e({success:!1,error:"Failed to get accounts"})}}(r),!0;case"REQUEST_ACCOUNTS":return async function(e){try{const a=await s();if(0===a.length)return chrome.action.openPopup(),void e({success:!1,error:"User rejected the request"});e({success:!0,data:a})}catch(a){e({success:!1,error:"Failed to request accounts"})}}(r),!0;case"WALLET_SWITCH_CHAIN":return o(e.data,r),!0;case"WALLET_ADD_CHAIN":return n(e.data,r),!0;case"ETH_REQUEST":case"ETH_REQUEST_ACCOUNTS":return async function(e,a,r){const{method:l,params:i}=e;console.log("ClearWallet Background: handleEthRequest",l,i);try{switch(l){case"eth_requestAccounts":const e=await s();if(0===e.length)r({error:"No accounts found"});else{const t=a.origin||a.url?.split("/").slice(0,3).join("/");if(t){c.add(t);const a=(await chrome.storage.local.get(["connectedSites"])).connectedSites||[];if(!a.find(e=>e.url===t)){const r={url:t,account:e[0],chainId:1,lastUsed:Date.now()};a.push(r),await chrome.storage.local.set({connectedSites:a}),console.log("ClearWallet Background: Connected new dApp:",t)}}r({result:e})}break;case"eth_accounts":const d=await s();r({result:d});break;case"eth_chainId":const u=(await chrome.storage.local.get(["selectedNetwork"])).selectedNetwork,h=u?t(u.chainId):"0x1";r({result:h});break;case"wallet_switchEthereumChain":if(!i||!i[0]||!i[0].chainId)return void r({error:{code:4001,message:"Invalid parameters"}});console.log("ClearWallet Background: Calling handleSwitchChain",i[0]),await o(i[0],e=>{console.log("ClearWallet Background: Switch chain response",e),r(null===e?{result:null}:{error:e.error||e})});break;case"wallet_addEthereumChain":if(!i||!i[0])return void r({error:{code:4001,message:"Invalid parameters"}});await n(i[0],e=>{r(null===e?{result:null}:{error:e.error||e})});break;default:r({error:{code:4200,message:`Method ${l} not supported`}})}}catch(e){console.error("ClearWallet Background: Error in handleEthRequest",e),r({error:{code:4001,message:"Internal error"}})}}(e.data,a,r),!0;case"CHECK_CONNECTION":return async function(e,a){try{const r=e.origin||e.url?.split("/").slice(0,3).join("/");if(!r)return void a({connected:!1});if(((await chrome.storage.local.get(["connectedSites"])).connectedSites||[]).find(e=>e.url===r)){const e=await s(),r=e.length>0?e[0]:null;if(r){const e=(await chrome.storage.local.get(["selectedNetwork"])).selectedNetwork;return void a({connected:!0,account:r,chainId:e?t(e.chainId):"0x1"})}}a({connected:!1})}catch(e){console.error("ClearWallet Background: Error checking connection",e),a({connected:!1})}}(a,r),!0;default:console.log("ClearWallet Background: Unknown message type:",e.type),r({error:"Unknown request type"})}}),chrome.runtime.onConnect.addListener(e=>{"clearwallet-provider"===e.name&&e.onMessage.addListener(async a=>{const{id:t,method:r,params:o}=a;try{let a;switch(r){case"eth_requestAccounts":const e=await s();a=e.length>0?e:await async function(){return await s()}();break;case"eth_accounts":a=await s();break;case"eth_chainId":a="0x1";break;case"net_version":a="1";break;case"personal_sign":case"eth_sign":a=await async function(){return"0x"+"0".repeat(130)}();break;case"eth_sendTransaction":a=await async function(){return"0x"+"0".repeat(64)}(o[0]);break;default:throw new Error(`Unsupported method: ${r}`)}e.postMessage({id:t,result:a,error:null})}catch(a){e.postMessage({id:t,result:null,error:{code:-32e3,message:a.message}})}})})})();